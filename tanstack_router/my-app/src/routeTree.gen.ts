/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsertableImport } from './routes/User_table'
import { Route as UserLoginImport } from './routes/User_Login'
import { Route as UserAddImport } from './routes/User_Add'

// Create/Update Routes

const UsertableRoute = UsertableImport.update({
  id: '/User_table',
  path: '/User_table',
  getParentRoute: () => rootRoute,
} as any)

const UserLoginRoute = UserLoginImport.update({
  id: '/User_Login',
  path: '/User_Login',
  getParentRoute: () => rootRoute,
} as any)

const UserAddRoute = UserAddImport.update({
  id: '/User_Add',
  path: '/User_Add',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/User_Add': {
      id: '/User_Add'
      path: '/User_Add'
      fullPath: '/User_Add'
      preLoaderRoute: typeof UserAddImport
      parentRoute: typeof rootRoute
    }
    '/User_Login': {
      id: '/User_Login'
      path: '/User_Login'
      fullPath: '/User_Login'
      preLoaderRoute: typeof UserLoginImport
      parentRoute: typeof rootRoute
    }
    '/User_table': {
      id: '/User_table'
      path: '/User_table'
      fullPath: '/User_table'
      preLoaderRoute: typeof UsertableImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/User_Add': typeof UserAddRoute
  '/User_Login': typeof UserLoginRoute
  '/User_table': typeof UsertableRoute
}

export interface FileRoutesByTo {
  '/User_Add': typeof UserAddRoute
  '/User_Login': typeof UserLoginRoute
  '/User_table': typeof UsertableRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/User_Add': typeof UserAddRoute
  '/User_Login': typeof UserLoginRoute
  '/User_table': typeof UsertableRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/User_Add' | '/User_Login' | '/User_table'
  fileRoutesByTo: FileRoutesByTo
  to: '/User_Add' | '/User_Login' | '/User_table'
  id: '__root__' | '/User_Add' | '/User_Login' | '/User_table'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  UserAddRoute: typeof UserAddRoute
  UserLoginRoute: typeof UserLoginRoute
  UsertableRoute: typeof UsertableRoute
}

const rootRouteChildren: RootRouteChildren = {
  UserAddRoute: UserAddRoute,
  UserLoginRoute: UserLoginRoute,
  UsertableRoute: UsertableRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/User_Add",
        "/User_Login",
        "/User_table"
      ]
    },
    "/User_Add": {
      "filePath": "User_Add.jsx"
    },
    "/User_Login": {
      "filePath": "User_Login.jsx"
    },
    "/User_table": {
      "filePath": "User_table.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
